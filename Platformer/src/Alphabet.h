#include <iostream>
#include <string>
#include <GLFW/glfw3.h>
#include <array>
#include <vector>
#pragma once


class Character {
private:
	static const int m_baseHeight = 13;
public:
	int width{};
	std::array < std::vector<int>, m_baseHeight> letter{};

	void printLetter(int x, int y, int scale) {
		glBegin(GL_POINTS);
		for (int i = 0; i < m_baseHeight * scale; i++) {
			for (int j = 0; j < width * scale; j++) {
				if (letter[i / scale][j / scale]) {
					glVertex2i(x + j, m_baseHeight * scale - 1 + y - i);
				}
			}
		}
		glEnd();
	}
};

// letters
Character A{ 13, { {
	{0,0,0,0,0,0,1,0,0,0,0,0,0},
	{0,0,0,0,0,1,1,1,0,0,0,0,0},
	{0,0,0,0,0,1,1,1,0,0,0,0,0},
	{0,0,0,0,1,1,0,1,1,0,0,0,0},
	{0,0,0,0,1,1,0,1,1,0,0,0,0},
	{0,0,0,1,1,0,0,0,1,1,0,0,0},
	{0,0,0,1,1,0,0,0,1,1,0,0,0},
	{0,0,0,1,1,1,1,1,1,1,0,0,0},
	{0,0,1,1,0,0,0,0,0,1,1,0,0},
	{0,0,1,1,0,0,0,0,0,1,1,0,0},
	{0,1,1,0,0,0,0,0,0,0,1,1,0},
	{0,1,1,0,0,0,0,0,0,0,1,1,0},
	{1,1,1,1,0,0,0,0,0,1,1,1,1}
	}}
};
Character B{ 10,{ {
	{1,1,1,1,1,1,1,1,0,0},
	{0,1,1,0,0,0,0,1,1,0},
	{0,1,1,0,0,0,0,0,1,1},
	{0,1,1,0,0,0,0,0,1,1},
	{0,1,1,0,0,0,0,0,1,1},
	{0,1,1,0,0,0,0,1,1,0},
	{0,1,1,1,1,1,1,1,0,0},
	{0,1,1,0,0,0,0,1,1,0},
	{0,1,1,0,0,0,0,0,1,1},
	{0,1,1,0,0,0,0,0,1,1},
	{0,1,1,0,0,0,0,0,1,1},
	{0,1,1,0,0,0,0,1,1,0},
	{1,1,1,1,1,1,1,1,0,0},
	} }
};
Character C{ 11,{ {
	{0,0,0,1,1,1,1,1,1,0,0},
	{0,0,1,1,0,0,0,0,0,1,0},
	{0,1,1,0,0,0,0,0,0,0,1},
	{1,1,0,0,0,0,0,0,0,0,0},
	{1,1,0,0,0,0,0,0,0,0,0},
	{1,1,0,0,0,0,0,0,0,0,0},
	{1,1,0,0,0,0,0,0,0,0,0},
	{1,1,0,0,0,0,0,0,0,0,0},
	{1,1,0,0,0,0,0,0,0,0,0},
	{1,1,0,0,0,0,0,0,0,0,0},
	{0,1,1,0,0,0,0,0,0,0,1},
	{0,0,1,1,0,0,0,0,0,1,0},
	{0,0,0,1,1,1,1,1,1,0,0}
	} }
};
Character D{ 12,{ {
	{1,1,1,1,1,1,1,1,1,0,0,0},
	{0,1,1,0,0,0,0,0,1,1,0,0},
	{0,1,1,0,0,0,0,0,0,1,1,0},
	{0,1,1,0,0,0,0,0,0,0,1,1},
	{0,1,1,0,0,0,0,0,0,0,1,1},
	{0,1,1,0,0,0,0,0,0,0,1,1},
	{0,1,1,0,0,0,0,0,0,0,1,1},
	{0,1,1,0,0,0,0,0,0,0,1,1},
	{0,1,1,0,0,0,0,0,0,0,1,1},
	{0,1,1,0,0,0,0,0,0,0,1,1},
	{0,1,1,0,0,0,0,0,0,1,1,0},
	{0,1,1,0,0,0,0,0,1,1,0,0},
	{1,1,1,1,1,1,1,1,1,0,0,0}
	} }
};
Character E{ 9,{ {
	{1,1,1,1,1,1,1,1,1},
	{0,1,1,0,0,0,0,0,1},
	{0,1,1,0,0,0,0,0,0},
	{0,1,1,0,0,0,0,0,0},
	{0,1,1,0,0,0,0,0,0},
	{0,1,1,0,0,0,1,0,0},
	{0,1,1,1,1,1,1,0,0},
	{0,1,1,0,0,0,1,0,0},
	{0,1,1,0,0,0,0,0,0},
	{0,1,1,0,0,0,0,0,0},
	{0,1,1,0,0,0,0,0,0},
	{0,1,1,0,0,0,0,0,1},
	{1,1,1,1,1,1,1,1,1}
	} }
};
Character F{ 9,{ {
	{1,1,1,1,1,1,1,1,1},
	{0,1,1,0,0,0,0,0,1},
	{0,1,1,0,0,0,0,0,0},
	{0,1,1,0,0,0,0,0,0},
	{0,1,1,0,0,0,0,0,0},
	{0,1,1,0,0,0,1,0,0},
	{0,1,1,1,1,1,1,0,0},
	{0,1,1,0,0,0,1,0,0},
	{0,1,1,0,0,0,0,0,0},
	{0,1,1,0,0,0,0,0,0},
	{0,1,1,0,0,0,0,0,0},
	{0,1,1,0,0,0,0,0,0},
	{1,1,1,1,0,0,0,0,0}
	} }
};
Character G{ 12,{ {
	{0,0,0,1,1,1,1,1,1,0,0,0},
	{0,0,1,1,0,0,0,0,0,1,0,0},
	{0,1,1,0,0,0,0,0,0,0,1,0},
	{1,1,0,0,0,0,0,0,0,0,0,0},
	{1,1,0,0,0,0,0,0,0,0,0,0},
	{1,1,0,0,0,0,0,0,0,0,0,0},
	{1,1,0,0,0,0,0,0,0,0,0,0},
	{1,1,0,0,0,0,0,0,1,1,1,1},
	{1,1,0,0,0,0,0,0,0,1,1,0},
	{1,1,0,0,0,0,0,0,0,1,1,0},
	{0,1,1,0,0,0,0,0,0,1,1,0},
	{0,0,1,1,0,0,0,0,1,1,1,0},
	{0,0,0,1,1,1,1,1,1,1,0,0}
	} }
};
Character H{ 11,{ {
	{1,1,1,1,0,0,0,1,1,1,1},
	{0,1,1,0,0,0,0,0,1,1,0},
	{0,1,1,0,0,0,0,0,1,1,0},
	{0,1,1,0,0,0,0,0,1,1,0},
	{0,1,1,0,0,0,0,0,1,1,0},
	{0,1,1,0,0,0,0,0,1,1,0},
	{0,1,1,1,1,1,1,1,1,1,0},
	{0,1,1,0,0,0,0,0,1,1,0},
	{0,1,1,0,0,0,0,0,1,1,0},
	{0,1,1,0,0,0,0,0,1,1,0},
	{0,1,1,0,0,0,0,0,1,1,0},
	{0,1,1,0,0,0,0,0,1,1,0},
	{1,1,1,1,0,0,0,1,1,1,1}
}} };
Character I{ 4, {{
	{1,1,1,1},
	{0,1,1,0},
	{0,1,1,0},
	{0,1,1,0},
	{0,1,1,0},
	{0,1,1,0},
	{0,1,1,0},
	{0,1,1,0},
	{0,1,1,0},
	{0,1,1,0},
	{0,1,1,0},
	{0,1,1,0},
	{1,1,1,1}
}} };
Character J{ 7, {{
	{0,1,1,1,1,1,1},
	{0,0,0,1,1,0,0},
	{0,0,0,1,1,0,0},
	{0,0,0,1,1,0,0},
	{0,0,0,1,1,0,0},
	{0,0,0,1,1,0,0},
	{0,0,0,1,1,0,0},
	{0,0,0,1,1,0,0},
	{0,0,0,1,1,0,0},
	{0,0,0,1,1,0,0},
	{0,0,0,1,1,0,0},
	{1,1,0,1,1,0,0},
	{1,1,1,1,0,0,0}
}} };
Character K{ 11, {{
	{1,1,1,1,0,0,1,1,1,1,0},
	{0,1,1,0,0,0,0,1,1,0,0},
	{0,1,1,0,0,0,1,1,0,0,0},
	{0,1,1,0,0,1,1,0,0,0,0},
	{0,1,1,0,1,1,0,0,0,0,0},
	{0,1,1,1,1,0,0,0,0,0,0},
	{0,1,1,1,1,0,0,0,0,0,0},
	{0,1,1,0,1,1,0,0,0,0,0},
	{0,1,1,0,0,1,1,0,0,0,0},
	{0,1,1,0,0,0,1,1,0,0,0},
	{0,1,1,0,0,0,0,1,1,0,0},
	{0,1,1,0,0,0,0,0,1,1,0},
	{1,1,1,1,0,0,0,1,1,1,1}
}} };
Character L{ 8,{ {
	{1,1,1,1,0,0,0,0},
	{0,1,1,0,0,0,0,0},
	{0,1,1,0,0,0,0,0},
	{0,1,1,0,0,0,0,0},
	{0,1,1,0,0,0,0,0},
	{0,1,1,0,0,0,0,0},
	{0,1,1,0,0,0,0,0},
	{0,1,1,0,0,0,0,0},
	{0,1,1,0,0,0,0,0},
	{0,1,1,0,0,0,0,0},
	{0,1,1,0,0,0,0,0},
	{0,1,1,0,0,0,0,1},
	{1,1,1,1,1,1,1,1}
}} };
Character M{ 13,{ {
	{1,1,1,1,0,0,0,0,0,1,1,1,1},
	{0,1,1,1,0,0,0,0,0,1,1,1,0},
	{0,1,1,1,1,0,0,0,1,1,1,1,0},
	{0,1,1,1,1,0,0,0,1,1,1,1,0},
	{0,1,1,0,1,1,0,1,1,0,1,1,0},
	{0,1,1,0,1,1,0,1,1,0,1,1,0},
	{0,1,1,0,0,1,1,1,0,0,1,1,0},
	{0,1,1,0,0,1,1,1,0,0,1,1,0},
	{0,1,1,0,0,0,1,0,0,0,1,1,0},
	{0,1,1,0,0,0,0,0,0,0,1,1,0},
	{0,1,1,0,0,0,0,0,0,0,1,1,0},
	{0,1,1,0,0,0,0,0,0,0,1,1,0},
	{1,1,1,1,0,0,0,0,0,1,1,1,1}
}} };
Character N{ 12,{ {
	{1,1,1,1,0,0,0,0,1,1,1,1},
	{0,1,1,1,0,0,0,0,0,1,1,0},
	{0,1,1,1,1,0,0,0,0,1,1,0},
	{0,1,1,1,1,0,0,0,0,1,1,0},
	{0,1,1,0,1,1,0,0,0,1,1,0},
	{0,1,1,0,1,1,0,0,0,1,1,0},
	{0,1,1,0,0,1,1,0,0,1,1,0},
	{0,1,1,0,0,0,1,1,0,1,1,0},
	{0,1,1,0,0,0,1,1,0,1,1,0},
	{0,1,1,0,0,0,0,1,1,1,1,0},
	{0,1,1,0,0,0,0,1,1,1,1,0},
	{0,1,1,0,0,0,0,0,1,1,1,0},
	{1,1,1,1,0,0,0,0,1,1,1,1}
}} };
Character O{ 12,{ {
	{0,0,0,1,1,1,1,1,1,0,0,0},
	{0,0,1,1,0,0,0,0,1,1,0,0},
	{0,1,1,0,0,0,0,0,0,1,1,0},
	{1,1,0,0,0,0,0,0,0,0,1,1},
	{1,1,0,0,0,0,0,0,0,0,1,1},
	{1,1,0,0,0,0,0,0,0,0,1,1},
	{1,1,0,0,0,0,0,0,0,0,1,1},
	{1,1,0,0,0,0,0,0,0,0,1,1},
	{1,1,0,0,0,0,0,0,0,0,1,1},
	{1,1,0,0,0,0,0,0,0,0,1,1},
	{0,1,1,0,0,0,0,0,0,1,1,0},
	{0,0,1,1,0,0,0,0,1,1,0,0},
	{0,0,0,1,1,1,1,1,1,0,0,0}
}} };
Character P{ 10,{ {
	{1,1,1,1,1,1,1,1,0,0},
	{0,1,1,0,0,0,0,1,1,0},
	{0,1,1,0,0,0,0,0,1,1},
	{0,1,1,0,0,0,0,0,1,1},
	{0,1,1,0,0,0,0,0,1,1},
	{0,1,1,0,0,0,0,1,1,0},
	{0,1,1,1,1,1,1,1,0,0},
	{0,1,1,0,0,0,0,0,0,0},
	{0,1,1,0,0,0,0,0,0,0},
	{0,1,1,0,0,0,0,0,0,0},
	{0,1,1,0,0,0,0,0,0,0},
	{0,1,1,0,0,0,0,0,0,0},
	{1,1,1,1,0,0,0,0,0,0},
}} };
Character Q{ 13,{ {
	{0,0,0,1,1,1,1,1,1,0,0,0,0},
	{0,0,1,1,0,0,0,0,1,1,0,0,0},
	{0,1,1,0,0,0,0,0,0,1,1,0,0},
	{1,1,0,0,0,0,0,0,0,0,1,1,0},
	{1,1,0,0,0,0,0,0,0,0,1,1,0},
	{1,1,0,0,0,0,0,0,0,0,1,1,0},
	{1,1,0,0,0,0,0,0,0,0,1,1,0},
	{1,1,0,0,0,0,0,0,0,0,1,1,0},
	{1,1,0,0,0,0,0,0,0,0,1,1,0},
	{1,1,0,0,0,0,1,1,0,0,1,1,0},
	{0,1,1,0,0,0,0,1,1,1,1,0,0},
	{0,0,1,1,0,0,0,0,1,1,1,0,0},
	{0,0,0,1,1,1,1,1,1,0,1,1,1}
}} };
Character R{ 11,{ {
	{1,1,1,1,1,1,1,1,0,0,0},
	{0,1,1,0,0,0,0,1,1,0,0},
	{0,1,1,0,0,0,0,0,1,1,0},
	{0,1,1,0,0,0,0,0,1,1,0},
	{0,1,1,0,0,0,0,0,1,1,0},
	{0,1,1,0,0,0,0,1,1,0,0},
	{0,1,1,1,1,1,1,1,0,0,0},
	{0,1,1,0,0,0,0,1,0,0,0},
	{0,1,1,0,0,0,0,0,1,1,0},
	{0,1,1,0,0,0,0,0,1,1,0},
	{0,1,1,0,0,0,0,0,1,1,0},
	{0,1,1,0,0,0,0,0,1,1,0},
	{1,1,1,1,0,0,0,1,1,1,1},
}} };
Character S{ 9,{ {
	{0,0,1,1,1,1,1,0,0},
	{0,1,1,0,0,0,0,1,0},
	{1,1,0,0,0,0,0,0,1},
	{1,1,0,0,0,0,0,0,0},
	{1,1,1,0,0,0,0,0,0},
	{1,1,1,1,1,1,0,0,0},
	{0,1,1,1,1,1,1,1,0},
	{0,0,0,1,1,1,1,1,1},
	{0,0,0,0,0,0,1,1,1},
	{0,0,0,0,0,0,0,1,1},
	{1,0,0,0,0,0,0,1,1},
	{0,1,0,0,0,0,1,1,0},
	{0,0,1,1,1,1,1,0,0}
}} };
Character T{ 10,{ {
	{1,1,1,1,1,1,1,1,1,1},
	{1,0,0,0,1,1,0,0,0,1},
	{0,0,0,0,1,1,0,0,0,0},
	{0,0,0,0,1,1,0,0,0,0},
	{0,0,0,0,1,1,0,0,0,0},
	{0,0,0,0,1,1,0,0,0,0},
	{0,0,0,0,1,1,0,0,0,0},
	{0,0,0,0,1,1,0,0,0,0},
	{0,0,0,0,1,1,0,0,0,0},
	{0,0,0,0,1,1,0,0,0,0},
	{0,0,0,0,1,1,0,0,0,0},
	{0,0,0,0,1,1,0,0,0,0},
	{0,0,0,1,1,1,1,0,0,0}
}} };
Character U{ 11,{ {
	{1,1,1,1,0,0,0,1,1,1,1},
	{0,1,1,0,0,0,0,0,1,1,0},
	{0,1,1,0,0,0,0,0,1,1,0},
	{0,1,1,0,0,0,0,0,1,1,0},
	{0,1,1,0,0,0,0,0,1,1,0},
	{0,1,1,0,0,0,0,0,1,1,0},
	{0,1,1,0,0,0,0,0,1,1,0},
	{0,1,1,0,0,0,0,0,1,1,0},
	{0,1,1,0,0,0,0,0,1,1,0},
	{0,1,1,0,0,0,0,0,1,1,0},
	{0,1,1,0,0,0,0,0,1,1,0},
	{0,1,1,1,0,0,0,1,1,1,0},
	{0,0,1,1,1,1,1,1,1,0,0}
}} };
Character V{ 11,{ {
	{1,1,1,1,0,0,0,1,1,1,1},
	{0,1,1,0,0,0,0,0,1,1,0},
	{0,1,1,0,0,0,0,0,1,1,0},
	{0,1,1,0,0,0,0,0,1,1,0},
	{0,1,1,0,0,0,0,0,1,1,0},
	{0,1,1,0,0,0,0,0,1,1,0},
	{0,1,1,0,0,0,0,0,1,1,0},
	{0,1,1,0,0,0,0,0,1,1,0},
	{0,0,1,1,0,0,0,1,1,0,0},
	{0,0,1,1,0,0,0,1,1,0,0},
	{0,0,0,1,1,0,1,1,0,0,0},
	{0,0,0,1,1,1,1,1,0,0,0},
	{0,0,0,0,1,1,1,0,0,0,0}
}} };
Character W{ 14,{ {
	{1,1,1,1,0,1,1,1,1,0,1,1,1,1},
	{0,1,1,0,0,0,1,1,0,0,0,1,1,0},
	{0,1,1,0,0,0,1,1,0,0,0,1,1,0},
	{0,1,1,0,0,0,1,1,0,0,0,1,1,0},
	{0,1,1,0,0,0,1,1,0,0,0,1,1,0},
	{0,1,1,0,0,0,1,1,0,0,0,1,1,0},
	{0,1,1,0,0,0,1,1,0,0,0,1,1,0},
	{0,1,1,0,0,0,1,1,0,0,0,1,1,0},
	{0,1,1,0,0,0,1,1,0,0,0,1,1,0},
	{0,1,1,0,0,0,1,1,0,0,0,1,1,0},
	{0,0,1,1,0,1,1,1,1,0,1,1,0,0},
	{0,0,1,1,1,1,1,1,1,1,1,1,0,0},
	{0,0,0,1,1,1,0,0,1,1,1,0,0,0}
}} };
Character X{ 10,{ {
	{1,1,1,1,0,0,1,1,1,1},
	{0,1,1,0,0,0,0,1,1,0},
	{0,1,1,0,0,0,0,1,1,0},
	{0,1,1,0,0,0,0,1,1,0},
	{0,0,1,1,0,0,1,1,0,0},
	{0,0,0,1,1,1,1,0,0,0},
	{0,0,0,0,1,1,0,0,0,0},
	{0,0,0,1,1,1,1,0,0,0},
	{0,0,1,1,0,0,1,1,0,0},
	{0,1,1,0,0,0,0,1,1,0},
	{0,1,1,0,0,0,0,1,1,0},
	{0,1,1,0,0,0,0,1,1,0},
	{1,1,1,1,0,0,1,1,1,1}
}} };
Character Y{ 10,{ {
	{1,1,1,1,0,0,1,1,1,1},
	{0,1,1,0,0,0,0,1,1,0},
	{0,1,1,0,0,0,0,1,1,0},
	{0,1,1,0,0,0,0,1,1,0},
	{0,1,1,0,0,0,0,1,1,0},
	{0,0,1,1,0,0,1,1,0,0},
	{0,0,0,1,1,1,1,0,0,0},
	{0,0,0,0,1,1,0,0,0,0},
	{0,0,0,0,1,1,0,0,0,0},
	{0,0,0,0,1,1,0,0,0,0},
	{0,0,0,0,1,1,0,0,0,0},
	{0,0,0,0,1,1,0,0,0,0},
	{0,0,0,1,1,1,1,0,0,0}
}} };
Character Z{ 11,{ {
	{1,1,1,1,1,1,1,1,1,1,1},
	{1,0,0,0,0,0,0,0,0,1,1},
	{0,0,0,0,0,0,0,0,1,1,1},
	{0,0,0,0,0,0,0,1,1,1,0},
	{0,0,0,0,0,0,1,1,1,0,0},
	{0,0,0,0,0,1,1,1,0,0,0},
	{0,0,0,0,1,1,1,0,0,0,0},
	{0,0,0,1,1,1,0,0,0,0,0},
	{0,0,1,1,1,0,0,0,0,0,0},
	{0,1,1,1,0,0,0,0,0,0,0},
	{1,1,1,0,0,0,0,0,0,0,0},
	{1,1,0,0,0,0,0,0,0,0,1},
	{1,1,1,1,1,1,1,1,1,1,1}
}} };


Character Zero{ 9,{ {
	{0,0,1,1,1,1,1,0,0},
	{0,1,1,0,0,0,1,1,0},
	{1,1,0,0,0,0,0,1,1},
	{1,1,0,0,0,0,0,1,1},
	{1,1,0,0,0,0,1,1,1},
	{1,1,0,0,0,1,0,1,1},
	{1,1,0,0,1,0,0,1,1},
	{1,1,0,1,0,0,0,1,1},
	{1,1,1,0,0,0,0,1,1},
	{1,1,0,0,0,0,0,1,1},
	{1,1,0,0,0,0,0,1,1},
	{0,1,1,0,0,0,1,1,0},
	{0,0,1,1,1,1,1,0,0}
}} };
Character One{ 6,{ {
	{0,0,1,1,0,0},
	{0,1,1,1,0,0},
	{1,1,1,1,0,0},
	{0,0,1,1,0,0},
	{0,0,1,1,0,0},
	{0,0,1,1,0,0},
	{0,0,1,1,0,0},
	{0,0,1,1,0,0},
	{0,0,1,1,0,0},
	{0,0,1,1,0,0},
	{0,0,1,1,0,0},
	{0,0,1,1,0,0},
	{1,1,1,1,1,1}
}} };
Character Two{ 9,{ {
	{0,0,1,1,1,1,1,0,0},
	{0,1,0,0,0,0,1,1,0},
	{1,0,0,0,0,0,0,1,1},
	{0,0,0,0,0,0,0,1,1},
	{0,0,0,0,0,0,0,1,1},
	{0,0,0,0,0,0,0,1,1},
	{0,0,0,0,0,0,1,1,0},
	{0,0,0,0,0,1,1,0,0},
	{0,0,0,0,1,1,0,0,0},
	{0,0,0,1,1,0,0,0,0},
	{0,0,1,1,0,0,0,0,0},
	{0,1,1,0,0,0,0,0,0},
	{1,1,1,1,1,1,1,1,1}
}} };
Character Three{ 9,{ {
	{0,0,1,1,1,1,1,0,0},
	{0,1,0,0,0,0,1,1,0},
	{1,0,0,0,0,0,0,1,1},
	{0,0,0,0,0,0,0,1,1},
	{0,0,0,0,0,0,0,1,1},
	{0,0,0,0,0,0,1,1,0},
	{0,0,0,0,0,1,1,0,0},
	{0,0,0,0,0,0,1,1,0},
	{0,0,0,0,0,0,0,1,1},
	{0,0,0,0,0,0,0,1,1},
	{1,0,0,0,0,0,0,1,1},
	{0,1,0,0,0,0,1,1,0},
	{0,0,1,1,1,1,1,0,0}
}} };
Character Four{ 9,{ {
	{0,0,0,0,0,0,1,1,0},
	{0,0,0,0,0,1,1,1,0},
	{0,0,0,0,1,1,1,1,0},
	{0,0,0,1,1,0,1,1,0},
	{0,0,1,1,0,0,1,1,0},
	{0,1,1,0,0,0,1,1,0},
	{1,1,0,0,0,0,1,1,0},
	{1,1,1,1,1,1,1,1,1},
	{0,0,0,0,0,0,1,1,0},
	{0,0,0,0,0,0,1,1,0},
	{0,0,0,0,0,0,1,1,0},
	{0,0,0,0,0,0,1,1,0},
	{0,0,0,0,0,1,1,1,1},
}} };
Character Five{ 9,{ {
	{1,1,1,1,1,1,1,1,1},
	{1,1,0,0,0,0,0,0,0},
	{1,1,0,0,0,0,0,0,0},
	{1,1,0,0,0,0,0,0,0},
	{1,1,0,0,0,0,0,0,0},
	{1,1,1,1,1,1,1,0,0},
	{0,0,0,0,0,0,1,1,0},
	{0,0,0,0,0,0,0,1,1},
	{0,0,0,0,0,0,0,1,1},
	{0,0,0,0,0,0,0,1,1},
	{1,0,0,0,0,0,0,1,1},
	{0,1,0,0,0,0,1,1,0},
	{0,0,1,1,1,1,1,0,0}
}} };
Character Six{ 9,{ {
	{0,0,1,1,1,1,1,0,0},
	{0,1,1,0,0,0,0,1,0},
	{1,1,0,0,0,0,0,0,1},
	{1,1,0,0,0,0,0,0,0},
	{1,1,0,0,0,0,0,0,0},
	{1,1,1,1,1,1,1,0,0},
	{1,1,1,0,0,0,1,1,0},
	{1,1,0,0,0,0,0,1,1},
	{1,1,0,0,0,0,0,1,1},
	{1,1,0,0,0,0,0,1,1},
	{1,1,0,0,0,0,0,1,1},
	{0,1,1,0,0,0,1,1,0},
	{0,0,1,1,1,1,1,0,0}
}} };
Character Seven{ 9,{ {
	{1,1,1,1,1,1,1,1,1},
	{0,0,0,0,0,0,0,1,1},
	{0,0,0,0,0,0,0,1,1},
	{0,0,0,0,0,0,0,1,1},
	{0,0,0,0,0,0,1,1,0},
	{0,0,0,0,0,0,1,1,0},
	{0,0,0,0,0,0,1,1,0},
	{0,0,0,0,0,1,1,0,0},
	{0,0,0,0,0,1,1,0,0},
	{0,0,0,0,0,1,1,0,0},
	{0,0,0,0,1,1,0,0,0},
	{0,0,0,0,1,1,0,0,0},
	{0,0,0,0,1,1,0,0,0},
}} };
Character Eight{ 9,{ {
	{0,0,1,1,1,1,1,0,0},
	{0,1,1,0,0,0,1,1,0},
	{1,1,0,0,0,0,0,1,1},
	{1,1,0,0,0,0,0,1,1},
	{0,1,1,0,0,0,1,1,0},
	{0,0,1,1,1,1,1,0,0},
	{0,1,1,0,0,0,1,1,0},
	{1,1,0,0,0,0,0,1,1},
	{1,1,0,0,0,0,0,1,1},
	{1,1,0,0,0,0,0,1,1},
	{1,1,0,0,0,0,0,1,1},
	{0,1,1,0,0,0,1,1,0},
	{0,0,1,1,1,1,1,0,0}
}} };
Character Nine{ 9,{ {
	{0,0,1,1,1,1,1,0,0},
	{0,1,1,0,0,0,1,1,0},
	{1,1,0,0,0,0,0,1,1},
	{1,1,0,0,0,0,0,1,1},
	{1,1,0,0,0,0,0,1,1},
	{1,1,0,0,0,0,0,1,1},
	{0,1,1,0,0,0,1,1,0},
	{0,0,1,1,1,1,1,1,0},
	{0,0,0,0,0,1,1,0,0},
	{0,0,0,0,0,1,1,0,0},
	{0,0,0,0,1,1,0,0,0},
	{0,0,0,0,1,1,0,0,0},
	{0,0,0,0,1,1,0,0,0}
}} };

Character Space{ 10,{{
	{0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0},
}} };

Character Comma{ 2,{ {
	{0,0},
	{0,0},
	{0,0},
	{0,0},
	{0,0},
	{0,0},
	{0,0},
	{0,0},
	{0,0},
	{1,1},
	{1,1},
	{0,1},
	{1,0},
}} };
Character Period{ 2,{ {
	{0,0},
	{0,0},
	{0,0},
	{0,0},
	{0,0},
	{0,0},
	{0,0},
	{0,0},
	{0,0},
	{0,0},
	{0,0},
	{1,1},
	{1,1},
}} };
Character ForwardSlash{ 6,{ {
	{0,0,0,0,0,1},
	{0,0,0,0,0,1},
	{0,0,0,0,1,1},
	{0,0,0,0,1,0},
	{0,0,0,1,1,0},
	{0,0,0,1,0,0},
	{0,0,1,1,0,0},
	{0,0,1,0,0,0},
	{0,1,1,0,0,0},
	{0,1,0,0,0,0},
	{1,1,0,0,0,0},
	{1,0,0,0,0,0},
	{1,0,0,0,0,0}
}} };

Character Colon{ 2,{ {
	{0,0},
	{0,0},
	{0,0},
	{1,1},
	{1,1},
	{0,0},
	{0,0},
	{0,0},
	{1,1},
	{1,1},
	{0,0},
	{0,0},
	{0,0},
}} };
Character Semicolon{ 2,{ {
	{0,0},
	{0,0},
	{0,0},
	{1,1},
	{1,1},
	{0,0},
	{0,0},
	{0,0},
	{1,1},
	{1,1},
	{0,1},
	{1,0},
	{0,0},
}} };
Character Apostrophe{ 2,{ {
	{1,1},
	{1,1},
	{0,1},
	{1,0},
	{0,0},
	{0,0},
	{0,0},
	{0,0},
	{0,0},
	{0,0},
	{0,0},
	{0,0},
	{0,0}
}} };


Character BackSlash{ 6,{ {
	{1,0,0,0,0,0},
	{1,0,0,0,0,0},
	{1,1,0,0,0,0},
	{0,1,0,0,0,0},
	{0,1,1,0,0,0},
	{0,0,1,0,0,0},
	{0,0,1,1,0,0},
	{0,0,0,1,0,0},
	{0,0,0,1,1,0},
	{0,0,0,0,1,0},
	{0,0,0,0,1,1},
	{0,0,0,0,0,1},
	{0,0,0,0,0,1},
}} };


Character LeftAngleBracket{ 5,{ {
	{0,0,0,0,0},
	{0,0,0,0,0},
	{0,0,0,0,0},
	{0,0,0,1,1},
	{0,0,1,1,0},
	{0,1,1,0,0},
	{1,1,0,0,0},
	{0,1,1,0,0},
	{0,0,1,1,0},
	{0,0,0,1,1},
	{0,0,0,0,0},
	{0,0,0,0,0},
	{0,0,0,0,0},
}} };
Character RightAngleBracket{ 5,{ {
	{0,0,0,0,0},
	{0,0,0,0,0},
	{0,0,0,0,0},
	{1,1,0,0,0},
	{0,1,1,0,0},
	{0,0,1,1,0},
	{0,0,0,1,1},
	{0,0,1,1,0},
	{0,1,1,0,0},
	{1,1,0,0,0},
	{0,0,0,0,0},
	{0,0,0,0,0},
	{0,0,0,0,0},
}} };


Character ExclamationPoint{ 2,{ {
	{1,1},
	{1,1},
	{1,1},
	{1,1},
	{1,1},
	{1,1},
	{1,1},
	{1,1},
	{1,1},
	{0,0},
	{0,0},
	{1,1},
	{1,1}
}} };

Character QuestionMark{ 7,{ {
	{0,1,1,1,1,0,0},
	{1,0,0,0,1,1,0},
	{0,0,0,0,0,1,1},
	{0,0,0,0,0,1,1},
	{0,0,0,0,0,1,1},
	{0,0,0,0,1,1,0},
	{0,0,0,1,1,0,0},
	{0,0,1,1,0,0,0},
	{0,0,1,1,0,0,0},
	{0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0},
	{0,0,1,1,0,0,0},
	{0,0,1,1,0,0,0}
}} };




void Cursor(int x, int y) {
	glBegin(GL_POINTS);
	for (int i = 0; i < 13; i++) {
		for (int j = 0; j < 2; j++) {
			glVertex2i(x + j, y + i);
		}
	}
	glEnd();
}

enum class Setting {
	print,
	length
};

int text(int x, int y, std::string text, int scale, Setting setting, int red, int green, int blue) {

	char* arr;
	arr = &text[0];

	int length = text.length();

	const int spacing = 2;

	for (int i = 0; i < length + 1; i++) {
		Character letter;
		//letters
		if (arr[i] == 'a' || arr[i] == 'A') {
			letter = A;
		}
		else if (arr[i] == 'b' || arr[i] == 'B') {
			letter = B;
		}
		else if (arr[i] == 'c' || arr[i] == 'C') {
			letter = C;
		}
		else if (arr[i] == 'd' || arr[i] == 'D') {
			letter = D;
		}
		else if (arr[i] == 'e' || arr[i] == 'E') {
			letter = E;
		}
		else if (arr[i] == 'f' || arr[i] == 'F') {
			letter = F;
		}
		else if (arr[i] == 'g' || arr[i] == 'G') {
			letter = G;
		}
		else if (arr[i] == 'h' || arr[i] == 'H') {
			letter = H;
		}
		else if (arr[i] == 'i' || arr[i] == 'I') {
			letter = I;
		}
		else if (arr[i] == 'j' || arr[i] == 'J') {
			letter = J;
		}
		else if (arr[i] == 'k' || arr[i] == 'K') {
			letter = K;
		}
		else if (arr[i] == 'l' || arr[i] == 'L') {
			letter = L;
		}
		else if (arr[i] == 'm' || arr[i] == 'M') {
			letter = M;
		}
		else if (arr[i] == 'n' || arr[i] == 'N') {
			letter = N;
		}
		else if (arr[i] == 'o' || arr[i] == 'O') {
			letter = O;
		}
		else if (arr[i] == 'p' || arr[i] == 'P') {
			letter = P;
		}
		else if (arr[i] == 'q' || arr[i] == 'Q') {
			letter = Q;
		}
		else if (arr[i] == 'r' || arr[i] == 'R') {
			letter = R;
		}
		else if (arr[i] == 's' || arr[i] == 'S') {
			letter = S;
		}
		else if (arr[i] == 't' || arr[i] == 'T') {
			letter = T;
		}
		else if (arr[i] == 'u' || arr[i] == 'U') {
			letter = U;
		}
		else if (arr[i] == 'v' || arr[i] == 'V') {
			letter = V;
		}
		else if (arr[i] == 'w' || arr[i] == 'W') {
			letter = W;
		}
		else if (arr[i] == 'x' || arr[i] == 'X') {
			letter = X;
		}
		else if (arr[i] == 'y' || arr[i] == 'Y') {
			letter = Y;
		}
		else if (arr[i] == 'z' || arr[i] == 'Z') {
			letter = Z;
		}


		//numbers
		else if (arr[i] == '0') {
			letter = Zero;
		}
		else if (arr[i] == '1') {
			letter = One;
		}
		else if (arr[i] == '2') {
			letter = Two;
		}
		else if (arr[i] == '3') {
			letter = Three;
		}
		else if (arr[i] == '4') {
			letter = Four;
		}
		else if (arr[i] == '5') {
			letter = Five;
		}
		else if (arr[i] == '6') {
			letter = Six;
		}
		else if (arr[i] == '7') {
			letter = Seven;
		}
		else if (arr[i] == '8') {
			letter = Eight;
		}
		else if (arr[i] == '9') {
			letter = Nine;
		}


		//special characters
		else if (arr[i] == ' ') {
			letter = Space;
		}
		else if (arr[i] == ',') {
			letter = Comma;
		}
		else if (arr[i] == '.') {
			letter = Period;
		}
		else if (arr[i] == '/') {
			letter = ForwardSlash;
		}
		else if (arr[i] == ':') {
			letter = Colon;
		}
		else if (arr[i] == ';') {
			letter = Semicolon;
		}
		else if (arr[i] == '\'') {
			letter = Apostrophe;
		}
		else if (arr[i] == '\\') {
			letter = BackSlash;
		}
		else if (arr[i] == '<') {
			letter = LeftAngleBracket;
		}
		else if (arr[i] == '>') {
			letter = RightAngleBracket;
		}
		else if (arr[i] == '!') {
			letter = ExclamationPoint;
		}
		else if (arr[i] == '?') {
			letter = QuestionMark;
		}

		if (setting == Setting::print) {
			glColor3b(red, green, blue);
			letter.printLetter(x,y, scale);
		}
		x += (spacing + letter.width) * scale;
	}
	return x;
}